{"version":3,"file":"static/js/357.1ac286a7.chunk.js","mappings":"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","sources":["webpack://my-app/./src/pages/Chat/ChatPage.module.scss?764a","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatContainer\":\"ChatPage_chatContainer__vb+l8\",\"messageList\":\"ChatPage_messageList__DA+lK\",\"messageItem\":\"ChatPage_messageItem__wtZ5L\",\"messageContent\":\"ChatPage_messageContent__E3aJh\",\"userName\":\"ChatPage_userName__mA8fv\",\"textMessage\":\"ChatPage_textMessage__eNhh7\",\"addMessageForm\":\"ChatPage_addMessageForm__w5UoV\",\"textareaContainer\":\"ChatPage_textareaContainer__PUIyc\",\"textarea\":\"ChatPage_textarea__p7B6P\",\"sendButton\":\"ChatPage_sendButton__adlgv\"};","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, AppStateType } from '../../redux/redux-store';\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer';\r\nimport { StatusType } from '../../api/chat-api';\r\nimport styles from './ChatPage.module.scss';\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return (\r\n    <div><Chat /></div>\r\n  )\r\n}\r\n\r\nexport type ChatMessageType = {\r\n    message: string;\r\n    photo: string;\r\n    usedID: number;\r\n    userName: string;\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const chatStatus = useSelector((state: AppStateType) => state.chat.chatStatus);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => dispatch(startMessagesListening()), 500);\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.chatContainer}>\r\n      {chatStatus === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n      <>\r\n        <Messages />\r\n        <AddMessageForm chatStatus={chatStatus} />\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ block: 'end', behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className={styles.messageList} onScroll={scrollHandler}>\r\n      {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({ message }) => {\r\n  return (\r\n    <div className={styles.messageItem}>\r\n      <img src={message.photo || \"https://e7.pngegg.com/pngimages/277/396/png-clipart-computer-icons-user-profile-person-heroes-black.png\"} alt=\"UserAvatar\" />\r\n      <div className={styles.messageContent}>\r\n        <p className={styles.userName}>{message.userName}</p>\r\n        <p className={styles.textMessage}>{message.message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AddMessageForm: React.FC<{ chatStatus: StatusType }> = ({ chatStatus }) => {\r\n  const [message, setMessage] = useState('');\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) return;\r\n    dispatch(sendMessage(message));\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className={styles.addMessageForm}>\r\n      <div className={styles.textareaContainer}>\r\n        <textarea\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          value={message}\r\n          className={styles.textarea}\r\n          placeholder=\"Enter your message...\"\r\n        ></textarea>\r\n      </div>\r\n      <button\r\n        disabled={chatStatus !== 'ready'}\r\n        onClick={sendMessageHandler}\r\n        className={styles.sendButton}\r\n      >\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatPage;\r\n"],"names":["Chat","dispatch","useDispatch","chatStatus","useSelector","state","chat","useEffect","setTimeout","startMessagesListening","stopMessagesListening","_jsxs","className","styles","children","_jsx","_Fragment","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useState","_messagesAnchorRef$cu","current","scrollIntoView","block","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","_ref","src","photo","alt","userName","_ref2","setMessage","onChange","value","placeholder","disabled","onClick","sendMessageHandler","sendMessage","ChatPage"],"sourceRoot":""}