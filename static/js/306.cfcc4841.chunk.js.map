{"version":3,"file":"static/js/306.cfcc4841.chunk.js","mappings":"mJACA,QAA0B,yBAA1B,EAA4D,wBAA5D,EAAkG,6BAAlG,EAAwI,wBAAxI,EAA+K,8BAA/K,EAA2S,2B,uBCG3S,MAYA,EAZoBA,IAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAS,GAAAC,OAAKC,EAAQ,KAAAD,OAAIC,GAAWC,UACtCC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAIT,EAAKM,SAAA,EACdJ,EAAAA,EAAAA,KAAA,OAAKQ,IAAKX,EAAMY,IAAKC,IAAI,gBAAgBT,UAAWE,IACnDN,EAAMc,SAET,ECFd,EALiBd,IACNG,EAAAA,EAAAA,KAAA,OAAKC,UAAWE,EAASC,SAAEP,EAAMe,U,sDCM5C,MA4BMC,GAAcC,EAAAA,EAAAA,GAAiB,IAsB/BC,GAAuBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,wBAAlBD,EApBJnB,IAErBG,EAAAA,EAAAA,KAAA,QAAMkB,SAAUrB,EAAMsB,aAAaf,UACjCC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CACJT,KAAK,iBACLU,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAeX,GAC1BY,YAAY,kIAGhBzB,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,oEAWlB,EAtDiBP,IACf,IAAI6B,EAAQ7B,EAAM8B,aAEdC,EACFF,EAAMG,aACNH,EAAMG,YAAYC,KAAKC,IACrB/B,EAAAA,EAAAA,KAACgC,EAAU,CAAYrB,KAAMoB,EAAEpB,KAAMZ,GAAIgC,EAAEhC,GAAIU,IAAKsB,EAAEE,OAArCF,EAAEhC,MAEnBmC,EACFR,EAAMS,cACNT,EAAMS,aAAaL,KAAKM,IAAMpC,EAAAA,EAAAA,KAACqC,EAAO,CAAYzB,QAASwB,EAAExB,SAAjBwB,EAAErC,MAMhD,OAAqB,IAAjBF,EAAMyC,QAAyBtC,EAAAA,EAAAA,KAACuC,EAAAA,GAAQ,CAAChC,GAAI,aAE/CF,EAAAA,EAAAA,MAAA,OAAKJ,UAAWE,EAAUC,SAAA,EACxBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWE,EAAcC,SAAEwB,KAChCvB,EAAAA,EAAAA,MAAA,OAAKJ,UAAWE,EAAeC,SAAA,EAC7BJ,EAAAA,EAAAA,KAAA,OAAAI,SAAM8B,KACNlC,EAAAA,EAAAA,KAACe,EAAoB,CAACG,SAVPsB,IACnB3C,EAAM4C,YAAYD,EAASE,eAAe,SAWpC,E,wBChBV,SAAeC,E,QAAAA,KACbC,EAAAA,EAAAA,KAfqBlB,IACd,CACLC,aAAcD,EAAMC,iBAIEkB,IACjB,CACLJ,YAAcC,IACZG,GAASC,EAAAA,EAAAA,GAAmBJ,GAAgB,MAOhDK,EAAAA,EAFF,CAGEC,E,6ECnBF,IAAIC,EAA8BvB,IAAK,CACnCY,OAAQZ,EAAMwB,KAAKZ,SAGhB,MAAMS,EAAoBI,IAC7B,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,OAA0B,IAAtBC,KAAK1D,MAAMyC,QAAyBtC,EAAAA,EAAAA,KAACuC,EAAAA,GAAQ,CAAChC,GAAI,YAC/CP,EAAAA,EAAAA,KAACmD,EAAS,IAAKI,KAAK1D,OAC/B,EAOJ,OAJuC+C,EAAAA,EAAAA,IAAQK,EAARL,CACnCQ,EAGiC,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-er-F\",\"dialog\":\"Dialogs_dialog__VTszD\",\"dialogItems\":\"Dialogs_dialogItems__7Tj3B\",\"active\":\"Dialogs_active__IFRI+\",\"messagesLeft\":\"Dialogs_messagesLeft__qg1Pk\",\"messagesRight\":\"Dialogs_messagesRight__gdOem\",\"message\":\"Dialogs_message__52PEF\",\"dialogImg\":\"Dialogs_dialogImg__+mtv+\"};","import React from 'react';\r\nimport n from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={`${n.dialog} ${n.active}`}>\r\n            <NavLink to={path}> \r\n                <img src={props.img} alt=\"dialog avatar\" className={n.dialogImg} />\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport n from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={n.dialog}>{props.message}</div>;\r\n};\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport n from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.messagesPage;\r\n\r\n  let dialogsElements =\r\n    state.dialogsData &&\r\n    state.dialogsData.map((d) => (\r\n      <DialogItem key={d.id} name={d.name} id={d.id} img={d.image} />\r\n    ));\r\n  let messagesElements =\r\n    state.messagesData &&\r\n    state.messagesData.map((m) => <Message key={m.id} message={m.message} />);\r\n\r\n  let addNewMessage = (formData) => {\r\n    props.sendMessage(formData.newMessageBody);\r\n  };\r\n\r\n  if (props.isAuth === false) return <Navigate to={\"/login/\"} />;\r\n  return (\r\n    <div className={n.dialogs}>\r\n      <div className={n.dialogItems}>{dialogsElements}</div>\r\n      <div className={n.messagesLeft}>\r\n        <div>{messagesElements}</div>\r\n        <AddMesssageFormRedux onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMesssageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <div>\r\n          <Field\r\n            name=\"newMessageBody\"\r\n            component={Textarea}\r\n            validate={[requiredField, maxLength50]}\r\n            placeholder=\"Введите своё сообщение\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <button>Отправить</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMesssageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(\r\n  AddMesssageForm\r\n);\r\n\r\nexport default Dialogs;\r\n","import { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n  });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth === false) return <Navigate to={\"/login\"} />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    \r\n      let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n        RedirectComponent\r\n      );\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","path","id","_jsx","className","concat","n","children","_jsxs","NavLink","to","src","img","alt","name","message","maxLength50","maxLengthCreator","AddMesssageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","state","messagesPage","dialogsElements","dialogsData","map","d","DialogItem","image","messagesElements","messagesData","m","Message","isAuth","Navigate","formData","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","auth","Component","RedirectComponent","React","render","this"],"sourceRoot":""}