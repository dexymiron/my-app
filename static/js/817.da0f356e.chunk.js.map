{"version":3,"file":"static/js/817.da0f356e.chunk.js","mappings":"2IACA,SAAgB,MAAQ,4B,sBCCIA,EAAAA,UA2D5B,MCdA,EA5CgCC,IAC9B,IAAKC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAQC,IAAaF,EAAAA,EAAAA,UAASH,EAAMI,SAEzCE,EAAAA,EAAAA,YAAU,KACRD,EAAUL,EAAMI,OAAO,GACtB,CAACJ,EAAMI,SAeV,OACEG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIP,IACAQ,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAMC,cAjBWC,KACvBT,GAAY,EAAK,EAgB2BM,SACnCR,EAAMI,QAAU,cAItBH,IACCQ,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,SACEG,WAAW,EACXC,OAtBiBC,KACzBZ,GAAY,GACZF,EAAMe,aAAaX,EAAO,EAqBlBY,SAlBcC,IACtBZ,EAAUY,EAAEC,cAAcC,MAAM,EAkBxBA,MAAOf,QAIT,ECbV,EAxBoBgB,IAAwC,IAADC,EAAA,IAAtC,QAAEC,EAAO,OAAElB,EAAM,aAAEW,GAAcK,EACpD,OAAKE,GAKHb,EAAAA,EAAAA,KAAA,OAAAD,UACED,EAAAA,EAAAA,MAAA,OAAKgB,UAAWC,EAAEC,iBAAiBjB,SAAA,CAClB,QAAda,EAAAC,EAAQI,cAAM,IAAAL,GAAdA,EAAgBM,OACflB,EAAAA,EAAAA,KAAA,OAAKmB,IAAKN,EAAQI,OAAOC,MAAOE,IAAI,aAEpCpB,EAAAA,EAAAA,KAAA,OACEmB,IAAI,kCACJC,IAAI,iBACJN,UAAWC,EAAEM,iBAGjBrB,EAAAA,EAAAA,KAAA,KAAAD,SAAIc,EAAQS,YACZtB,EAAAA,EAAAA,KAACuB,EAAsB,CAAC5B,OAAQA,EAAQW,aAAcA,UAhBnDN,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,GAkBX,E,cCzBV,SAAgB,WAAa,4BAA4B,MAAQ,wBCAjE,EAAuB,mBCcvB,EAXcjC,IAENO,EAAAA,EAAAA,MAAA,OAAKgB,UAAWC,EAAOhB,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAKmB,IAAI,iGACP5B,EAAMkC,SACR3B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,SAAW,IAAER,EAAMmC,iB,6CCAjBC,EAAAA,EAAAA,GAAiB,IAErC,IAoBIC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,yBAAlBD,EApBJtC,IAElBS,EAAAA,EAAAA,KAAA,QAAM+B,SAAUxC,EAAMyC,aAAajC,UACjCD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACiC,EAAAA,EAAK,CACJC,KAAK,cACLC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,GAAeX,EAAAA,EAAAA,GAAiB,KAC3CY,YAAa,oBAGjBvC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,uFAWlB,MAoBA,EApBgBT,EAAAA,MAAYC,IAC1B,IAAIiD,EAAgBjD,EAAMkD,MAAMC,KAAKC,IACnC3C,EAAAA,EAAAA,KAAC4C,EAAI,CAAYC,GAAIF,EAAEE,GAAIpB,QAASkB,EAAElB,QAASC,WAAYiB,EAAEjB,YAAlDiB,EAAEE,MASf,OACE/C,EAAAA,EAAAA,MAAA,OAAKgB,UAAWC,EAAE+B,WAAW/C,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uDACJC,EAAAA,EAAAA,KAAC4B,EAAmB,CAACG,SAPRgB,IACfxD,EAAMyD,QAAQD,EAAOE,YAAY,KAO/BjD,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAE0B,MAAM1C,SAAEyC,MACtB,I,cC/CV,MAiBA,GAFyBU,EAAAA,EAAAA,KAfAC,IAChB,CACLV,MAAOU,EAAMC,YAAYX,MACzBQ,YAAaE,EAAMC,YAAYH,gBAIPI,IACnB,CACLL,QAAUC,IACRI,GAASC,EAAAA,EAAAA,IAAqBL,GAAa,KAKxBC,CAA6CK,GCHtE,EAbiBhE,IAEbO,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACwD,EAAW,CACV3C,QAAStB,EAAMsB,QACflB,OAAQJ,EAAMI,OACdW,aAAcf,EAAMe,gBAEtBN,EAAAA,EAAAA,KAACyD,EAAgB,CAACC,MAAOnE,EAAMmE,W,kCCQrC,MAAMC,UAAyBrE,EAAAA,UAE7BsE,kBAAAA,GACE,IAAIC,EAASC,KAAKvE,MAAMwE,MAAMC,OAAOH,OAChCA,IACHA,EAASC,KAAKvE,MAAM0E,kBAKtBH,KAAKvE,MAAM2E,eAAeL,GAC1BC,KAAKvE,MAAM4E,UAAUN,EACvB,CAEAO,iBAAAA,GACEN,KAAKF,oBACP,CAGAS,kBAAAA,CAAmBC,GACbR,KAAKvE,MAAMwE,MAAMC,OAAOH,SAAWS,EAAUP,MAAMC,OAAOH,QAC5DC,KAAKF,oBAET,CAGAW,MAAAA,GACE,OACEvE,EAAAA,EAAAA,KAACwE,EAAO,CACN3D,QAASiD,KAAKvE,MAAMsB,QACpBlB,OAAQmE,KAAKvE,MAAMI,OACnBW,aAAcwD,KAAKvE,MAAMe,cAG/B,EAWF,SAAemE,EAAAA,EAAAA,KACbvB,EAAAA,EAAAA,KARqBC,IAAK,CAC1BtC,QAASsC,EAAMC,YAAYvC,QAC3BlB,OAAQwD,EAAMC,YAAYzD,OAC1BsE,iBAAkBd,EAAMuB,KAAKb,OAC7Bc,OAAQxB,EAAMuB,KAAKC,UAIM,CAAET,eAAc,KAAEC,UAAS,KAAE7D,aAAa,QArDrE,SAAoBsE,GAClB,OAAO,SAAkCrF,GACvC,MAAMwE,EAAQ,CAAEC,QAAQa,EAAAA,EAAAA,MACxB,OAAO7E,EAAAA,EAAAA,KAAC4E,EAAS,IAAKrF,EAAOwE,MAAOA,GACtC,CACF,GAkDEe,EAAAA,EAHF,CAIEnB,E,6ECjEF,IAAIoB,EAA8B5B,IAAK,CACnCwB,OAAQxB,EAAMuB,KAAKC,SAGhB,MAAMG,EAAoBF,IAC7B,MAAMI,UAA0B1F,EAAAA,UAC5BiF,MAAAA,GACI,OAA0B,IAAtBT,KAAKvE,MAAMoF,QAAyB3E,EAAAA,EAAAA,KAACiF,EAAAA,GAAQ,CAACC,GAAI,YAC/ClF,EAAAA,EAAAA,KAAC4E,EAAS,IAAKd,KAAKvE,OAC/B,EAOJ,OAJuC2D,EAAAA,EAAAA,IAAQ6B,EAAR7B,CACnC8B,EAGiC,C","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"image\":\"ProfileInfo_image__pu5gV\"};","import React from \"react\";\r\n\r\nclass ProfileStatus extends React.Component {\r\n  state = {\r\n    editMode: false,\r\n    status: this.props.status,\r\n  };\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true,\r\n    });\r\n  };\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false,\r\n    });\r\n    this.props.updateStatus(this.state.status);\r\n  };\r\n\r\n  onStatusChange = (e) => {\r\n    this.setState({\r\n      status: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevstate) {\r\n    if (prevProps.status !== this.props.status) {\r\n      this.setState({\r\n        status: this.props.status,\r\n      });\r\n    }\r\n    console.log(\"\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.editMode && (\r\n          <div>\r\n            <span onDoubleClick={this.activateEditMode}>\r\n              {this.props.status || \"-------\"}\r\n            </span>\r\n          </div>\r\n        )}\r\n        {this.state.editMode && (\r\n          <div>\r\n            <input\r\n              onChange={this.onStatusChange}\r\n              autoFocus={true}\r\n              onBlur={this.deactivateEditMode}\r\n              value={this.state.status}\r\n            ></input>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"-------\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={status}\r\n          ></input>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport n from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={n.descriptionBlock}>\r\n        {profile.photos?.large ? (\r\n          <img src={profile.photos.large} alt=\"Profile\" />\r\n        ) : (\r\n          <img\r\n            src=\"https://via.placeholder.com/150\"\r\n            alt=\"Default avatar\"\r\n            className={n.defaultAvatar}\r\n          />\r\n        )}\r\n        <p>{profile.fullName}</p>\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__SesW+\",\"posts\":\"MyPosts_posts__WLM2O\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__rBDBL\"};","import React from 'react';\r\nimport n from './Post.module.css';\r\n\r\n\r\nconst Post = (props) => {\r\n    return ( \r\n        <div className={n.item}>\r\n          <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS94-h02nA6tjH-orlYL1CJN7kZ2QCO2ldtww&s'></img>\r\n          { props.message }\r\n          <div>\r\n            <span>like</span> {props.likesCount} \r\n          </div> \r\n        </div> );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport n from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <div>\r\n          <Field\r\n            name=\"newPostText\"\r\n            component={Textarea}\r\n            validate={[requiredField, maxLengthCreator(10)]}\r\n            placeholder={\"Post message\"}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button>Добавить пост</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nlet AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(\r\n  AddNewPostForm\r\n);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  let postsElements = props.posts.map((p) => (\r\n    <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount} />\r\n  ));\r\n\r\n  let newPostElement = React.createRef();\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={n.postsblock}>\r\n      <h3>Мои посты</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      <div className={n.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer store={props.store} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getProfilePage,\r\n  getStatus,\r\n  updateStatus,\r\n} from \"../../redux/profile-reducer\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n// Функция withRouter для передачи параметров маршрута\r\nfunction withRouter(Component) {\r\n  return function ComponentWithRouterProps(props) {\r\n    const match = { params: useParams() }; // Получаем параметры маршрута\r\n    return <Component {...props} match={match} />;\r\n  };\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n  // Логика для получения userId и вызова API\r\n  redirectToMainUser() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n\r\n      /*  console.log(\"userId:\", userId);\r\n      console.log(\"authorizedUserId:\", this.props.authorizedUserId);  */\r\n    }\r\n    this.props.getProfilePage(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n  // Метод вызывается при монтировании компонента\r\n  componentDidMount() {\r\n    this.redirectToMainUser();\r\n  }\r\n\r\n  // Метод вызывается при обновлении компонента\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.redirectToMainUser();\r\n    }\r\n  }\r\n\r\n  // Метод render возвращает JSX\r\n  render() {\r\n    return (\r\n      <Profile\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// Подключение состояния из Redux\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getProfilePage, getStatus, updateStatus }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n  });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth === false) return <Navigate to={\"/login\"} />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    \r\n      let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n        RedirectComponent\r\n      );\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["React","props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","activateEditMode","autoFocus","onBlur","deactivateEditMode","updateStatus","onChange","e","currentTarget","value","_ref","_profile$photos","profile","className","n","descriptionBlock","photos","large","src","alt","defaultAvatar","fullName","ProfileStatusWithHooks","Preloader","message","likesCount","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","requiredField","placeholder","postsElements","posts","map","p","Post","id","postsblock","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","store","ProfileContainer","redirectToMainUser","userId","this","match","params","authorizedUserId","getProfilePage","getStatus","componentDidMount","componentDidUpdate","prevProps","render","Profile","compose","auth","isAuth","Component","useParams","withAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","Navigate","to"],"sourceRoot":""}