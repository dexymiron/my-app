{"version":3,"file":"static/js/723.ab43ba97.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.scss?02be","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","webpack://my-app/./src/components/common/FormsControls/FormsControls.module.scss?c1c8","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ym5-x\",\"dialog\":\"Dialogs_dialog__c9803\",\"dialogItems\":\"Dialogs_dialogItems__FcOQC\",\"active\":\"Dialogs_active__NeaCN\",\"messagesLeft\":\"Dialogs_messagesLeft__8UNsP\",\"messagesRight\":\"Dialogs_messagesRight__uC0Y0\",\"message\":\"Dialogs_message__Fk3hO\",\"dialogImg\":\"Dialogs_dialogImg__2K3mU\",\"messageForm\":\"Dialogs_messageForm__tOP88\"};","import React from \"react\";\r\nimport n from \"./../Dialogs.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype DialogItemProps = {\r\n  key: number \r\n  name: string | undefined\r\n  id: number\r\n  img: string | undefined\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemProps> = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={`${n.dialog} ${n.active}`}>\r\n      <NavLink to={path}>\r\n        <img src={props.img} alt=\"dialog avatar\" className={n.dialogImg} />\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport n from \"./../Dialogs.module.scss\";\r\n\r\ntype MessagePropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n  return <div className={n.dialog}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport n from \"./Dialogs.module.scss\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Field, reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../utils/validators/validators\";\r\nimport { initialStateType as MessagesPageType } from \"../../redux/dialogs-reducer\"; // Assuming messages-reducer manages messagesPage state\r\n\r\n\r\ntype PropsType = {\r\n  messagesPage: MessagesPageType;\r\n  sendMessage: (messageText: string) => void;\r\n  isAuth: boolean;\r\n};\r\n\r\ntype FormDataType = {\r\n  newMessageBody: string;\r\n};\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  let state = props.messagesPage;\r\n\r\n  let dialogsElements =\r\n    state.dialogsData &&\r\n    state.dialogsData.map((d) => (\r\n      <DialogItem key={d.id} name={d.name} id={d.id} img={d.image} />\r\n    ));\r\n  let messagesElements =\r\n    state.messagesData &&\r\n    state.messagesData.map((m) => <Message key={m.id} message={m.message} />);\r\n\r\n  let addNewMessage = (formData: FormDataType) => {\r\n    props.sendMessage(formData.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={n.dialogs}>\r\n      <div className={n.dialogItems}>{dialogsElements}</div>\r\n      <div className={n.messagesLeft}>\r\n        <div>{messagesElements}</div>\r\n        <AddMesssageFormRedux onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMesssageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={n.messageForm}>\r\n        <div>\r\n          <Field\r\n            name=\"newMessageBody\"\r\n            component={Textarea}\r\n            validate={[requiredField, maxLength50]}\r\n            placeholder=\"Введите своё сообщение\"\r\n          />\r\n          <button>Отправить</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMesssageFormRedux = reduxForm<FormDataType>({ form: \"dialogAddMessageForm\" })(\r\n  AddMesssageForm\r\n);\r\n\r\nexport default Dialogs;\r\n","import { actions } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\n//@ts-ignore\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n  };\r\n};\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {...actions}),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__sC1cx\",\"error\":\"FormsControls_error__b4P29\",\"formSummaryError\":\"FormsControls_formSummaryError__RnVQJ\",\"createField\":\"FormsControls_createField__zvZ-q\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n  children: React.ReactNode\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (<div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n      {children}\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({ input, meta, ...restProps }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n      <textarea {...input} {...restProps} />\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({ input, meta, ...restProps }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n      <input {...input} {...restProps} />\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const createField = (\r\n  placeholder: string | null,\r\n  name: string,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps> | string,\r\n  props = {},\r\n  text = \"\"\r\n) => {\r\n  return (\r\n    <div className={\"createField\"}>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        component={component}\r\n        validate={validators}\r\n        {...props}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import React from \"react\";\r\n\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/redux-store';\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n        //@ts-ignore\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\n"],"names":["props","path","id","_jsx","className","concat","n","children","_jsxs","NavLink","to","src","img","alt","name","message","maxLength50","maxLengthCreator","AddMesssageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","state","messagesPage","dialogsElements","dialogsData","map","d","DialogItem","image","messagesElements","messagesData","m","Message","formData","sendMessage","newMessageBody","compose","connect","actions","withAuthRedirect","Dialogs","_ref2","input","meta","restProps","hasError","touched","error","styles","Input","_ref3","createField","validators","arguments","length","undefined","text","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","Navigate","value","maxLength"],"sourceRoot":""}