{"version":3,"file":"static/js/477.eb03fa1e.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?ab21","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileStatus.module.scss?a2cc","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.scss?f7c8","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.scss?39f4","components/Profile/MyPosts/Post/Post.tsx","components/common/FormsControls/FormikControls.ts","webpack://my-app/./src/components/Profile/MyPosts/AddNewPostForm.module.scss?bc2a","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://my-app/./src/components/Profile/Profile.module.scss?d6ae","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://my-app/./src/components/common/FormsControls/FormsControls.module.scss?c1c8","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"preloader\":\"ProfileInfo_preloader__U7OiM\",\"profileDataFormWrapper\":\"ProfileInfo_profileDataFormWrapper__Ni6w3\",\"defaultAvatar\":\"ProfileInfo_defaultAvatar__eamlK\",\"avatar\":\"ProfileInfo_avatar__MrKrS\",\"contact\":\"ProfileInfo_contact__ZAl27\",\"formSummaryError\":\"ProfileInfo_formSummaryError__24zSM\",\"profileName\":\"ProfileInfo_profileName__n0CjC\",\"imageWithChangeWrapper\":\"ProfileInfo_imageWithChangeWrapper__+0Vfh\",\"profileDataForm\":\"ProfileInfo_profileDataForm__ddHWz\",\"chooseImage\":\"ProfileInfo_chooseImage__AbDPf\",\"chooseAvatarLabel\":\"ProfileInfo_chooseAvatarLabel__pW95X\",\"imageBackground\":\"ProfileInfo_imageBackground__Kin6v\",\"editProfileBtn\":\"ProfileInfo_editProfileBtn__oAbub\",\"cancelProfileBtn\":\"ProfileInfo_cancelProfileBtn__YhYbV\",\"MainEditedForm\":\"ProfileInfo_MainEditedForm__4tOQY\",\"leftColFormData\":\"ProfileInfo_leftColFormData__C5XMb\",\"Contacts\":\"ProfileInfo_Contacts__fOoad\",\"profileInfo\":\"ProfileInfo_profileInfo__sA3y1\",\"profileInfoForm\":\"ProfileInfo_profileInfoForm__w4gBV\",\"leftColForm\":\"ProfileInfo_leftColForm__w3+4M\",\"leftColFormNameContainer\":\"ProfileInfo_leftColFormNameContainer__lKnmx\",\"leftColFormName\":\"ProfileInfo_leftColFormName__VCokx\",\"myProffessionalSkillsContainer\":\"ProfileInfo_myProffessionalSkillsContainer__Jo3dG\",\"myProffessionalSkills\":\"ProfileInfo_myProffessionalSkills__mDitr\",\"aboutMeContainer\":\"ProfileInfo_aboutMeContainer__Q4ufJ\",\"aboutMe\":\"ProfileInfo_aboutMe__SQoMj\",\"ContactsFormContainer\":\"ProfileInfo_ContactsFormContainer__aclxb\",\"ContactsFormContainerVisible\":\"ProfileInfo_ContactsFormContainerVisible__CUWjX\",\"toggleInfoVisibilityBtn\":\"ProfileInfo_toggleInfoVisibilityBtn__90KKk\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileStatus\":\"ProfileStatus_profileStatus__O5BOo\",\"statusStatus\":\"ProfileStatus_statusStatus__5Dk2W\",\"statusEditModeInput\":\"ProfileStatus_statusEditModeInput__U4JTU\",\"statusValue\":\"ProfileStatus_statusValue__R2jmV\"};","import React from \"react\";\r\nimport { ChangeEvent , useState, useEffect } from \"react\";\r\nimport n from \"./ProfileStatus.module.scss\";\r\n\r\ntype PropsType = {\r\n  status: string;\r\n  updateStatus: (newStatus: string) => void;\r\n  className?: string\r\n};\r\n\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent <HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={n.profileStatus}>\r\n      {!editMode && (\r\n        <div>\r\n          <b className={n.statusStatus}>Status: </b>\r\n          <span onDoubleClick={activateEditMode} className={n.statusValue}>\r\n            {props.status || \"Enter your status here\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={status}\r\n            className={n.statusEditModeInput}\r\n          ></input>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport n from \"./ProfileInfo.module.scss\";\r\nimport { maxLengthCreator, requiredField } from \"../../../utils/validators/validators\";\r\nimport { ProfileType } from \"../../../redux/types/types\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n  cancelEdit: () => void;\r\n}\r\n\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error, cancelEdit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={n.MainEditedForm}>\r\n      <div className={n.buttons}>\r\n        <button\r\n          type=\"button\"\r\n          className={n.cancelProfileBtn}\r\n          onClick={cancelEdit}\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button className={n.editProfileBtn}>Save</button>\r\n      </div>\r\n      <div className={n.leftColFormData}>\r\n        {error && <div className={n.formSummaryError}>{error}</div>}\r\n        <div className={n.nameBlock}>\r\n          <b className={n.nameTitle}>Full name</b>:{\" \"}\r\n          {createField(\"Full name\", \"fullName\", [requiredField, maxLengthCreator(21)], Input)}\r\n        </div>\r\n        <div className={n.LookingJobBlock}>\r\n          <b className={n.LookingJobTitle}>Looking for a job</b>:{\" \"}\r\n          {createField(\"\", \"lookingForAJob\", [], Input, {\r\n            type: \"checkbox\",\r\n          })}\r\n        </div>\r\n        <div className={n.ProfessionalSkillsBlock}>\r\n          <b className={n.ProfessionalSkillsTitle}>My professional skills</b>:\r\n          {createField(\r\n            \"My professional skills\",\r\n            \"lookingForAJobDescription\",\r\n            [requiredField, maxLengthCreator(200)],\r\n            Textarea\r\n          )}\r\n        </div>  \r\n        <div className={n.AboutMeBlock}>\r\n          <b className={n.AboutMeTitle}>About me</b>:\r\n          {createField(\r\n            \"About me\",\r\n            \"aboutMe\",\r\n            [requiredField, maxLengthCreator(200)],\r\n            Textarea\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={n.Contacts}>\r\n        <b className={n.ContactsTitle}>Contacts</b>{\" \"}\r\n        <hr style={{marginBlock: '10px'}}></hr>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          if (key === \"vk\") {\r\n            return null; /* Исключили VK */\r\n          } else if (key === \"mainLink\") {\r\n            return null; /* Исключили mainLink */\r\n          }\r\n          return (\r\n            <div key={key} className={n.contactBlock}>\r\n              <b className={n.contactTitle}>\r\n                {key}:{\" \"}\r\n                {createField(\r\n                  key,\r\n                  \"contacts.\" + key,\r\n                  [maxLengthCreator(35)],\r\n                  Input\r\n                )}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ form: \"edit-profile\", destroyOnUnmount: true})(\r\n  ProfileDataForm\r\n);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport n from \"./ProfileInfo.module.scss\";\r\n//@ts-ignore\r\nimport Preloader from \"../../common/preloader/preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n//@ts-ignore\r\nimport userPhoto from \"../../../assets/images/icons/noPhoto.svg\";\r\nimport { useState } from \"react\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { ContactsType, ProfileType } from \"../../../redux/types/types\";\r\n\r\nexport type ProfileInfoType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n  savePhoto: (file: File) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  saveProfile,\r\n  savePhoto,\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [errorMessage, setErrorMessage] = useState(\"\"); // Добавлено состояние для сообщения об ошибке\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onSubmit = (formData:ProfileType) => {\r\n    //todo: remove then\r\n    saveProfile(formData)\r\n      .then(() => {\r\n        setEditMode(false); // Возвращаемся в режим просмотра, если успех\r\n        setErrorMessage(\"\"); // Сбрасываем сообщение об ошибке\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error save profile:\", error);\r\n        setErrorMessage(\"Please filled text and try again\");\r\n      });\r\n      \r\n  };\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) savePhoto(e.target.files[0]);\r\n  };\r\n\r\n  const cancelEdit = () => {\r\n    setEditMode(false); // Отмена режима редактирования\r\n  };\r\n\r\n  return (\r\n    <div className={n.profileDataFormWrapper}>\r\n      <div className={n.imageWithChangeWrapper}>\r\n        {/* Если это твой аккаунт отобрази изменение img */}\r\n        <div className={n.bntChangeAvatar}>\r\n          <label htmlFor=\"imageInput\" className={n.chooseAvatarLabel}>\r\n            <div className={n.imageBlock}>\r\n              {profile.photos?.large ? (\r\n                <img\r\n                  src={profile.photos.large}\r\n                  alt=\"Profile\"\r\n                  className={n.avatar}\r\n                />\r\n              ) : (\r\n                <img\r\n                  src={userPhoto}\r\n                  alt=\"Default avatar\"\r\n                  className={n.defaultAvatar}\r\n                />\r\n              )}\r\n            </div>\r\n          </label>\r\n\r\n          {isOwner && (\r\n            <input\r\n              className={n.chooseImage}\r\n              id=\"imageInput\"\r\n              type={\"file\"}\r\n              onChange={onMainPhotoSelected}\r\n            />\r\n          )}\r\n        </div>\r\n        <ProfileStatusWithHooks\r\n          status={status}\r\n          updateStatus={updateStatus}\r\n          className={n.profileStatus}\r\n        />\r\n      </div>\r\n\r\n      <div className={n.NameStatusFormWrapper}>\r\n        <div className={n.profileName}>\r\n          <p>{profile.fullName}</p>\r\n        </div>\r\n\r\n        {/* Отображение EditMode */}\r\n\r\n        <div className={n.profileDataForm}>\r\n          {editMode ? (\r\n            <ProfileDataForm\r\n              initialValues={profile}\r\n              profile={profile}\r\n              onSubmit={onSubmit}\r\n              cancelEdit={cancelEdit}\r\n            />\r\n          ) : (\r\n            <ProfileData\r\n              goToEditMode={() => setEditMode(true)}\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n\r\n  const [infoVisibility, setInfoVisibility] = useState(false);\r\n\r\n  const toggleInfoVisibility = () => {\r\n    setInfoVisibility(!infoVisibility);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={n.profileInfo}>\r\n      <div className={n.editBtnWrapper}>\r\n        {isOwner && (\r\n          <div>\r\n            <button className={n.editProfileBtn} onClick={goToEditMode}>\r\n              Edit Profile\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={n.profileInfoForm}>\r\n        <div className={n.leftColForm}>\r\n          <div className={n.leftColFormNameContainer}>\r\n            <b className={n.leftColFormName}>Full name:</b> {profile.fullName}\r\n            {/* <hr style={{marginTop: '10px'}}></hr> */}\r\n          </div>\r\n          <div>\r\n            <b>Looking for a job:</b> <span style={{color: 'rgba(0, 0, 0, 0.8'}}>{profile.lookingForAJob ? \"yes\" : \"no\"}</span>\r\n          </div>{profile.lookingForAJob && (\r\n            <div className={n.myProffessionalSkillsContainer}>\r\n              <h4 className={n.myProffessionalSkills}>My professional skills:</h4> <span style={{color: 'rgba(0, 0, 0, 0.8'}}>{profile.lookingForAJobDescription}</span>\r\n            </div>\r\n          )}\r\n          <div className={n.aboutMeContainer}>\r\n            <h4 className={n.aboutMe}>About me:</h4> <span style={{color: 'rgba(0, 0, 0, 0.8'}}>{profile.aboutMe}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <button onClick={toggleInfoVisibility} className={n.toggleInfoVisibilityBtn}>Show all information ↓</button>\r\n\r\n        <div className={`${n.ContactsFormContainer} ${infoVisibility ? n.ContactsFormContainerVisible : ''}`}>\r\n          <div className={n.ContactsFormTitleContainer}>\r\n            <b className={n.ContactsFormTitle}>Contacts:</b>\r\n            <hr style={{marginTop: '10px'}}></hr>\r\n          </div>{\" \"}\r\n          {Object.keys(profile.contacts).map((key) => {\r\n            if (key === \"vk\") {\r\n              return null; /* Исключили VK */\r\n            } else if (key === \"mainLink\") {\r\n              return null; /* Исключили mainLink */\r\n            }\r\n            return (\r\n              <Contact\r\n                key={key}\r\n                contactTitle={key}\r\n                contactValue={profile.contacts[key as keyof ContactsType]}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string | null\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={n.contact}>\r\n      <b>{contactTitle}:</b> <span style={{color: 'rgba(0, 0, 0, 0.8'}}>{contactValue}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__WdcXG\",\"postsImageAndHeader\":\"MyPosts_postsImageAndHeader__4w2NI\",\"InputWithButton\":\"MyPosts_InputWithButton__C3f5b\",\"posts\":\"MyPosts_posts__4yLu6\",\"postsHeader\":\"MyPosts_postsHeader__PyR1g\",\"postsImage\":\"MyPosts_postsImage__S7G+H\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__8D5w5\",\"postImageWrapper\":\"Post_postImageWrapper__3FLMm\",\"postImage\":\"Post_postImage__Tt-Vd\",\"postMessage\":\"Post_postMessage__a6qhF\",\"likesAndCount\":\"Post_likesAndCount__TeX34\",\"svgLikes\":\"Post_svgLikes__XAuSF\",\"likes\":\"Post_likes__sEgZd\",\"likesCount\":\"Post_likesCount__2GuQw\",\"removeButton\":\"Post_removeButton__I5w1h\"};","import React, { useState } from \"react\";\r\nimport n from \"./Post.module.scss\";\r\n\r\ntype PropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n  onRemove: () => void;\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n  const [likes, setLikes] = useState(props.likesCount);\r\n\r\n  return (\r\n    <div className={n.item}>\r\n      <div className={n.postImageWrapper}><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS94-h02nA6tjH-orlYL1CJN7kZ2QCO2ldtww&s\" alt=\"userPhoto\" className={n.postImage}></img></div>\r\n      <div className={n.postMessage}>{props.message}</div>\r\n      <div className={n.likesAndCount} onClick={() => setLikes(prevLikes => prevLikes + 1)}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"1em\"\r\n          height=\"1em\"\r\n          viewBox=\"0 0 400 400\"\r\n          className={n.svgLikes}\r\n        >\r\n          <path\r\n            fill=\"#059669\"\r\n            d=\"m472.06 334l-144.16-6.13c-4.61-.36-23.9-1.21-23.9-25.87c0-23.81 19.16-25.33 24.14-25.88L472.06 270c12.67.13 23.94 14.43 23.94 32s-11.27 31.87-23.94 32M330.61 202.33L437.35 194C450 194 464 210.68 464 227.88v.33c0 16.32-11.14 29.62-24.88 29.79l-108.45-1.73C304 253 304 236.83 304 229.88c0-22.88 21.8-27.15 26.61-27.55M421.85 480l-89.37-8.93C308 470.14 304 453.82 304 443.59c0-18.38 13.41-24.6 26.67-24.6l91-3c14.54.23 26.32 14.5 26.32 32s-11.67 31.67-26.14 32.01m34.36-71.5l-126.4-6.21c-9.39-.63-25.81-3-25.81-26.37c0-12 4.35-25.61 25-27.53l127.19-3.88c13.16.14 23.81 13.49 23.81 31.4s-10.65 32.43-23.79 32.58Z\"\r\n          />\r\n          <path\r\n            fill=\"#059669\"\r\n            d=\"M133.55 238.06A15.85 15.85 0 0 1 126 240a15.8 15.8 0 0 0 7.51-1.92Zm40.59-69.28l.13-.23zc-20.5 35.51-30.36 54.95-33.82 62c3.47-7.07 13.34-26.51 33.82-62\"\r\n          />\r\n          <path\r\n            fill=\"#059669\"\r\n            d=\"m139.34 232.84l1-2a16.27 16.27 0 0 1-6.77 7.25a16.35 16.35 0 0 0 5.77-5.25\"\r\n          />\r\n          <path\r\n            fill=\"#059669\"\r\n            d=\"M316.06 52.62C306.63 39.32 291 32 272 32a16 16 0 0 0-14.31 8.84c-3 6.07-15.25 24-28.19 42.91c-18 26.33-40.35 59.07-55.23 84.8l-.13.23c-20.48 35.49-30.35 54.93-33.82 62l-1 2a16.35 16.35 0 0 1-5.79 5.22a15.8 15.8 0 0 1-7.53 2h-25.31A84.69 84.69 0 0 0 16 324.69v38.61a84.69 84.69 0 0 0 84.69 84.7h48.79a17.55 17.55 0 0 1 9.58 2.89C182 465.87 225.34 480 272 480c7.45 0 14.19-.14 20.27-.38a8 8 0 0 0 6.2-12.68l-.1-.14C289.8 454.41 288 441 288 432a61.2 61.2 0 0 1 5.19-24.77a17.36 17.36 0 0 0 0-14.05a63.8 63.8 0 0 1 0-50.39a17.32 17.32 0 0 0 0-14a62.15 62.15 0 0 1 0-49.59a18.13 18.13 0 0 0 0-14.68A60.3 60.3 0 0 1 288 239c0-8.2 2-21.3 8-31.19a15.63 15.63 0 0 0 1.14-13.64c-.38-1-.76-2.07-1.13-3.17a24.84 24.84 0 0 1-.86-11.58c3-19.34 9.67-36.29 16.74-54.16c3.08-7.78 6.27-15.82 9.22-24.26c6.14-17.57 4.3-35.2-5.05-48.38\"\r\n          />\r\n        </svg>\r\n        <button className={n.removeButton} onClick={props.onRemove}>Remove</button>\r\n        <div className={n.likes}>likes</div>\r\n        <div className={n.likesCount}>{likes}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import * as Yup from \"yup\"; // Для валидации\r\nimport n from \"./FormikCotrols.module.scss\";\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n  newPostText: Yup.string()\r\n    .max(15, \"Max 15 symbols\")\r\n    .required(\"🠜 Required Field\"),\r\n});\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"errorText\":\"AddNewPostForm_errorText__2Y3lW\",\"postsForm\":\"AddNewPostForm_postsForm__Qi0nR\",\"addPostBtn\":\"AddNewPostForm_addPostBtn__i+HZ-\",\"postsText\":\"AddNewPostForm_postsText__BEKHe\",\"formInput\":\"AddNewPostForm_formInput__CPBrb\"};","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n//@ts-ignore\r\nimport { validationSchema } from \"../../common/FormsControls/FormikControls\";\r\nimport n from \"./AddNewPostForm.module.scss\";\r\n//@ts-ignore\r\nimport userNoPhoto from \"../../../assets/images/icons/noPhoto.svg\";\r\n\r\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ntype PropsType = {\r\n  addPost: (postText: string) => void;\r\n  profileImage: string\r\n}\r\n\r\nconst AddNewPostForm: React.FC<PropsType> = (props) => {\r\n  /* Toastify */\r\n  const notify = () =>\r\n    toast.success(\"Post Added!\", {\r\n      position: \"bottom-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"dark\",\r\n      transition: Flip,\r\n    });\r\n\r\n  return (\r\n    <div className={n.AddPostsForm}>\r\n      <Formik\r\n        initialValues={{ newPostText: \"\" }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, { resetForm }) => {\r\n          props.addPost(values.newPostText);\r\n          resetForm();\r\n          notify();\r\n        }}\r\n      >\r\n        <Form>\r\n          <div className={n.postsText}>\r\n            <img className={n.postsImage} src={props.profileImage || userNoPhoto} alt=\"post-image\" style={{width: '40px', borderRadius: '30px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.2)'}}/>\r\n              <Field\r\n                name=\"newPostText\"\r\n                as=\"textarea\"\r\n                placeholder=\"Post message\"\r\n                className={n.formInput}\r\n              />\r\n              <ErrorMessage\r\n                name=\"newPostText\"\r\n                component=\"Form\"\r\n                className={n.errorText}\r\n              />\r\n            <button className={n.addPostBtn} type=\"submit\">\r\n              Add Post\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <ToastContainer />\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewPostForm;\r\n","// MyPosts.tsx\r\n\r\nimport React from \"react\";\r\nimport n from \"./MyPosts.module.scss\";\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostForm from \"./AddNewPostForm\";\r\nimport { PostType } from \"../../../redux/types/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { actions } from \"../../../redux/profile-reducer\";\r\n\r\nimport { toast, Flip } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType>;\r\n};\r\n\r\nexport type DispatchPropsType = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = React.memo((props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const profileImage = useSelector((state: any) => state.profilePage.profile?.photos?.small)\r\n\r\n  const postsElements = props.posts.map((p) => (\r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount} \r\n    onRemove={() => {\r\n      dispatch(actions.removePostActionCreator(p.id)); \r\n      notify();\r\n      }\r\n    }\r\n    />\r\n  ));\r\n\r\n  const onAddPost = (newPostText: string) => {\r\n    props.addPost(newPostText);\r\n  };\r\n\r\n  /* Toastify */\r\n  const notify = () =>\r\n    toast.info(\"Post Removed!\", {\r\n      position: \"bottom-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"dark\",\r\n      transition: Flip,\r\n    });\r\n\r\n  return (\r\n    <div className={n.postsBlock}>\r\n      <div className={n.postsImageAndHeader}>\r\n        <h3 className={n.postsHeader}>My Posts</h3>\r\n      </div>\r\n      <div className={n.InputWithButton}>\r\n        <AddNewPostForm addPost={onAddPost} profileImage={profileImage}/>\r\n      </div>\r\n      <div className={n.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n \r\nconst mapStateToProps = (state: AppStateType): MapPropsType => ({\r\n    posts: state.profilePage.posts,\r\n  });\r\n  \r\n  const mapDispatchToProps: DispatchPropsType = {\r\n    addPost: actions.addPostActionCreator,\r\n  };\r\n  \r\n  const MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(MyPosts);\r\n  \r\n  export default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"Profile\":\"Profile_Profile__629kk\"};","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n//@ts-ignore\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport n from \"./Profile.module.scss\";\r\nimport { ProfileType } from \"../../redux/types/types\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  if (!props.profile) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={n.Profile}>\r\n      <ProfileInfo\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner} \r\n        profile={props.profile}\r\n        saveProfile={props.saveProfile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer  />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\n//@ts-ignore\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getProfilePage,\r\n  getStatus,\r\n  updateStatus,\r\n  saveProfile,\r\n  savePhoto,\r\n} from \"../../redux/profile-reducer\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { ProfileType } from \"../../redux/types/types\";\r\n\r\n// Типизация параметров маршрута\r\ntype PathParamsType = {\r\n  userId: string | undefined;\r\n};\r\n\r\n// Типизация состояния из Redux\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\n\r\n// Типизация экшенов Redux\r\ntype DispatchPropsType = {\r\n  getProfilePage: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\n// Итоговый тип пропсов\r\ntype PropsType = MapPropsType & DispatchPropsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  redirectToMainUser() {\r\n    //@ts-ignore\r\n    const { userId } = this.props.match.params;\r\n    let actualUserId = userId || this.props.authorizedUserId?.toString();\r\n    \r\n    if (actualUserId) {\r\n      this.props.getProfilePage(+actualUserId);\r\n      this.props.getStatus(+actualUserId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.redirectToMainUser();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    //@ts-ignore\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.redirectToMainUser();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n      //@ts-ignore\r\n        isOwner={!this.props.match.params.userId}\r\n        savePhoto={this.props.savePhoto}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        saveProfile={this.props.saveProfile}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// Функция для получения параметров маршрута\r\nconst withRouter = (Component: React.ComponentType<PropsType>) => {\r\n  return (props: PropsType) => {\r\n    const params = useParams<PathParamsType>();\r\n    //@ts-ignore\r\n    return <Component {...props} match={{ params }} />;\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getProfilePage,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__sC1cx\",\"error\":\"FormsControls_error__b4P29\",\"formSummaryError\":\"FormsControls_formSummaryError__RnVQJ\",\"createField\":\"FormsControls_createField__zvZ-q\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.scss\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n  children: React.ReactNode\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (<div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n      {children}\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({ input, meta, ...restProps }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n      <textarea {...input} {...restProps} />\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({ input, meta, ...restProps }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n      <input {...input} {...restProps} />\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const createField = (\r\n  placeholder: string | null,\r\n  name: string,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps> | string,\r\n  props = {},\r\n  text = \"\"\r\n) => {\r\n  return (\r\n    <div className={\"createField\"}>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        component={component}\r\n        validate={validators}\r\n        {...props}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import React from \"react\";\r\n\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/redux-store';\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n        //@ts-ignore\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\n"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","className","n","children","_jsx","onDoubleClick","activateEditMode","autoFocus","onBlur","deactivateEditMode","updateStatus","onChange","e","currentTarget","value","reduxForm","form","destroyOnUnmount","_ref","handleSubmit","profile","error","cancelEdit","onSubmit","MainEditedForm","buttons","type","cancelProfileBtn","onClick","editProfileBtn","leftColFormData","formSummaryError","nameBlock","nameTitle","createField","requiredField","maxLengthCreator","Input","LookingJobBlock","LookingJobTitle","ProfessionalSkillsBlock","ProfessionalSkillsTitle","Textarea","AboutMeBlock","AboutMeTitle","Contacts","ContactsTitle","style","marginBlock","Object","keys","contacts","map","key","contactBlock","contactTitle","ProfileData","_ref2","isOwner","goToEditMode","infoVisibility","setInfoVisibility","profileInfo","editBtnWrapper","profileInfoForm","leftColForm","leftColFormNameContainer","leftColFormName","fullName","color","lookingForAJob","myProffessionalSkillsContainer","myProffessionalSkills","lookingForAJobDescription","aboutMeContainer","aboutMe","toggleInfoVisibility","toggleInfoVisibilityBtn","concat","ContactsFormContainer","ContactsFormContainerVisible","ContactsFormTitleContainer","ContactsFormTitle","marginTop","Contact","contactValue","_ref3","contact","_profile$photos","saveProfile","savePhoto","errorMessage","setErrorMessage","Preloader","profileDataFormWrapper","imageWithChangeWrapper","bntChangeAvatar","htmlFor","chooseAvatarLabel","imageBlock","photos","large","src","alt","avatar","userPhoto","defaultAvatar","chooseImage","id","_e$target$files","target","files","length","ProfileStatusWithHooks","profileStatus","NameStatusFormWrapper","profileName","profileDataForm","ProfileDataForm","initialValues","formData","then","catch","console","likes","setLikes","likesCount","message","prevLikes","xmlns","width","height","viewBox","fill","d","onRemove","validationSchema","Yup","shape","newPostText","max","required","AddPostsForm","Formik","values","resetForm","addPost","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","transition","Flip","Form","postsText","postsImage","profileImage","userNoPhoto","borderRadius","boxShadow","Field","name","as","placeholder","formInput","ErrorMessage","component","errorText","addPostBtn","ToastContainer","React","dispatch","useDispatch","useSelector","state","_state$profilePage$pr","_state$profilePage$pr2","profilePage","small","postsElements","posts","p","Post","actions","removePostActionCreator","notify","info","AddNewPostForm","mapDispatchToProps","addPostActionCreator","connect","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","redirectToMainUser","_this$props$authorize","userId","this","match","params","actualUserId","authorizedUserId","toString","getProfilePage","getStatus","componentDidMount","componentDidUpdate","prevProps","render","Profile","compose","auth","isAuth","Component","useParams","withAuthRedirect","input","meta","restProps","hasError","touched","styles","validators","arguments","text","validate","mapStateToPropsForRedirect","WrappedComponent","Navigate","to","maxLength"],"sourceRoot":""}